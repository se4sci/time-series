hash,time,message,buggy
88d14e5,2011-04-23T07:27:51,add missing include,0.0
2319686.0,2011-04-23T14:08:31,Turn down the analytic Jacobian tolerances so they don't fail on single-precision tests,0.0
a563f62,2011-04-23T15:54:58,Fix for bug in weighted sensitivity solve code when assemble_before_solve was turned off,1.0
f1ed15d,2011-04-23T17:03:32,Fix example 28 for 1D,1.0
44cc4a7,2011-04-23T17:34:47,Work with separate libMesh namespace,0.0
402b556,2011-04-23T19:46:18,Fixes for separate libMesh namespace,1.0
5c6b12d,2011-04-23T23:42:31,Fix a comment typo  mistake,1.0
2a17eac,2011-04-23T23:54:47,More robust assertion code,0.0
e564398,2011-04-23T23:55:21,Let's verify that set_node_processor_ids worked,0.0
e5d3a0d,2011-04-24T00:36:24,Add missing initializer,0.0
69cd4aa,2011-04-24T02:20:19,Fix for the previous ParallelMesh::all_first_order fix.  plot_error and ex26 seem to be working with ParallelMesh now.,1.0
b53114c,2011-04-24T02:37:10,Disable blas/lapack use in non-double-precision cases  I'm seeing memory corruption when using this with triple-precision and threading.,0.0
6965656.0,2011-04-24T04:46:25,Fix error message formatting,1.0
4db9134,2011-04-24T05:01:28,The safe perturbation size we can take depends on floating point tolerance.  Of course it depends on solution scaling too  but nothing we can do about that outside user code...,0.0
88b9490,2011-04-24T05:02:10,Tweak the ex26/ex27 tolerances so that the numerical jacobians aren't too far off in single-precision mode,0.0
92442d5,2011-04-24T15:03:59,"Another ""32 bit floats suck"" change  ex27 now passes in single precision too.",0.0
bd2a83f,2011-04-24T15:05:34,In fact  let's just give users an example of turning off jacobian verification instead.,0.0
88dda4e,2011-04-25T14:30:20,Updated publications list for April 2011.,0.0
9bd4f9c,2011-04-25T15:15:59,change in RBSystem  do not read store_non_dirichlet_operators in from input file.,0.0
cca0522,2011-04-25T17:19:55,Adding gitignore to libmesh.,0.0
7837dce,2011-04-25T20:03:58,Adding (untested!) quadruple-precision support.,0.0
17df42a,2011-04-27T02:01:31,short circuit vector_mult for empty matrix,0.0
0c524e3,2011-04-27T16:34:05,add more functions to stub spin_mutex,0.0
70e7f51,2011-04-27T16:37:30,Optimize away transcendental (or even repeated plain arithmetic) FLOPs in PatchRecoveryErrorEstimator,0.0
3636cb8,2011-04-27T21:20:14,Fix status message grammar,0.0
bafaff0,2011-04-28T00:09:06,nemesis mesh output working,0.0
6fb6661,2011-04-28T00:09:25,working nemesis output,0.0
43f0c9e,2011-04-28T00:09:34,nemesis mesh output working,0.0
8d07b78,2011-04-28T00:09:43,remove some debugging print statements,0.0
2a164ae,2011-04-28T00:09:51,don't serialize mesh for parallel output formats,0.0
08c7f2d,2011-04-28T00:10:00,fix nemesis filename padding,1.0
220c0a4,2011-04-28T00:10:17,Fixed swapped meaning of global_elem_blk_ids and global_elem_blk_cnts.  Removing unused variable warnings.,1.0
acf29ae,2011-04-28T00:10:30,Write zero size blocks if certain partitions don't have any elements in them on a given processor.,0.0
1f29efb,2011-04-28T00:10:44,Refactoring: Moved sideset writing code to its own function.,0.0
b711017,2011-04-28T03:41:47,make nemesis output solutions,0.0
8225486.0,2011-04-28T14:43:39,1.) tecio.a support for latest OSX 2.) extended user-provided object support to the nonlinear system and solver interface.  this required creating abstract base classes inside the NonlinearImplicitSystem which the user can derive from to implement residual and jacobian computation.  additionally  the NonlinearSolver was extended to include pointers to user-provided objects of these types.,0.0
c295a9b,2011-04-28T22:53:39,Print error messages to std:err and give more descriptive error message when opening a file fails.,0.0
782a229,2011-04-29T01:37:00,Fix for --disable-exodus/nemesis,1.0
a43f131,2011-04-29T19:22:30,Support string<->enum conversion for NODEELEM,0.0
af6b234,2011-04-29T19:47:30,Added exodus files to git ignore list.,0.0
07f643e,2011-04-30T04:00:34,Patch from Vikram Garg: Create (and have ImplicitSystem use) LinearSolver::adjoint_solve Override PetscLinearSolver::adjoint_solve to use KSPSolveTranspose Add option to reuse preconditioners Test this option in ex26,1.0
059bbd3,2011-05-02T20:00:13,Call write_timestep only on processor 0 for exodusII,0.0
990ea13,2011-05-02T21:35:10,"Made all conversions take an additional argument for the inverse node map.  For all elements except hex27  the ""inverse"" node map is identical to the forward node map.",0.0
7bf51e6,2011-05-02T22:07:49,Ex4 5 11 13 14 15 18 19 22 25 28 now write out .e files instead of .exd,0.0
2ae531f,2011-05-03T14:28:49,Patch from Boyce Griffith to enable more flexible FE reinit options,1.0
363502e,2011-05-03T15:45:35,Fixes for segfault  possible caching bug,1.0
7065b6d,2011-05-03T16:42:51,Slightly more legible fix for caching,1.0
2cbd66d,2011-05-03T17:12:14,Fixes for FEXYZ,1.0
b1b1baf,2011-05-03T23:14:36,Updated publications for May 2011.,0.0
c1e689a,2011-05-05T13:21:34,Bugfix from Boyce Griffith for caching on new edge_reinit,1.0
f2bb451,2011-05-05T17:36:33,New patch (of elements) reuse option to PatchRecoveryErrorEstimator  based on a patch (of software) from Vikram Garg.  Turning this on by default since it's much faster and still gives decent results in our tests.,1.0
4e68bbf,2011-05-05T17:39:53,Set svn:ignore,0.0
c601baa,2011-05-05T18:54:20,"Added new utility header and (empty) source file for the ""hashword"" implementation by Bob Jenkins.",0.0
65cf99b,2011-05-05T20:15:22,Make patch_reuse a runtime option in example 26,1.0
c13619e,2011-05-05T20:16:06,Removing some debugging chatter,0.0
8376a56,2011-05-05T22:24:21,Avoid unused variables warning,0.0
2201a45,2011-05-09T16:15:27,Adding an Elem::print_info() method for debugging,0.0
2462db8,2011-05-09T16:18:26,Let's not forget to print element ids...,0.0
63c6f16,2011-05-09T16:19:13,Print lots of element info whenever we get an inverse map convergence failure  and even when we just see an anomously large Newton step,0.0
4472bd1,2011-05-09T17:45:48,Fix get_info/print_info for non-infinite elements,1.0
be8370c,2011-05-09T18:08:10,Removing redundant copy,0.0
99e9477,2011-05-09T18:21:24,Fix for non-on/off QoI weights,1.0
e155b60,2011-05-09T18:22:54,Add setter function for QoISet  more complete citation of idea,0.0
5898d5c,2011-05-09T18:38:37,Make our getter const  now that we've got a separate setter.,0.0
530771f,2011-05-09T18:39:03,Bug fixes for QoISet example,1.0
5d0342f,2011-05-09T19:27:29,Remove redundant extra error estimate at the end of the adaptive loop  we can put this back when we have an AdjointRefinement or something equally good to demonstrate instead.,0.0
6267c27,2011-05-09T19:47:56,It's apparently possible for Newton to step well outside the master element but then come back in and converge properly.  So let's not die or scream unless we have a real divergence.,0.0
3a8454a,2011-05-09T20:22:17,Restoring old qoi_set() setter API for compatibility,0.0
704dc1e,2011-05-10T18:45:14,Move print_trace() to a terminate_handler - that way it happens for all uncaught exceptions  not just libMesh errors.,0.0
a805c60,2011-05-11T16:19:52,modify system update to use ghosting,0.0
bb3936e,2011-05-12T18:29:35,restructured DofObject internal storage,0.0
f8c2dfe,2011-05-12T18:41:24,only set the old_dof_object if the current system has DOFs.  prevents the case of multiple systems being initialized successively - in the old implementation the first system would initialize and not set the old_dof_object.  then the second system would initialize and set the old_dof_object because the first system had added DOFs.  this fixes that erroneous behavior.,0.0
14e6b63,2011-05-12T18:55:32,LocationMap::key() changes,0.0
910f49b,2011-05-12T20:15:14,typedefed the storage to make it easier to play with other allocators later on,0.0
d11affd,2011-05-12T21:02:32,Fix for old off-by-one error in refinement flagging,1.0
e998a49,2011-05-12T22:00:16,Fix unused variable warning in fe_map.C,1.0
e003e9f,2011-05-13T12:48:40,Update the subset of boost we include in contrib.  Added the pool allocator  this looks great for helping reduce the storage overhead and time associated with allocating many small objects.  Also added the test_boost.C file to make sure we can use the subset of boost we actually want.,0.0
d0317d0,2011-05-13T17:31:25,look for boost  use contributed minimal one if not found,0.0
72683f7,2011-05-13T17:39:00,add boost include path,0.0
f6bba15,2011-05-14T03:23:45,Fix error messages  end unused vars warning,0.0
801ab27,2011-05-14T04:56:18,Some fixes (still woefully incomplete) for ParallelMesh adaptive coarsening  and a new Elem::total_family_tree utility function,1.0
4f7731c,2011-05-14T12:51:58,keyword expansion  added pooled allocator interface which is not used anywhere yet,0.0
3197fb3,2011-05-15T22:39:04,fast pool allocator,0.0
2213982.0,2011-05-16T15:04:59,Do some bounds checking in ExodusII Conversion class.,0.0
f7de747,2011-05-16T15:34:52,Reverted faulty assert logic.,0.0
5a2c265,2011-05-16T16:42:33,Bounds checking in ExodusII_IO_Helper::Conversion.,0.0
f13d66b,2011-05-16T17:22:06,add methods to allow copy construction of objects using PoolAllocator<>,0.0
e8e11f0,2011-05-16T17:44:54,Actually check against the array length  not the size of the array in bytes.,0.0
13522f0,2011-05-16T17:52:28,Make macro a little safer by adding parentheses.,0.0
537911c,2011-05-16T20:43:21,Updated developers list.,0.0
7f22ad7,2011-05-16T21:11:47,updated www.mit.edu URL,0.0
09c9877,2011-05-16T21:50:47,Added evaluate_RB_error_bound flag to RBEvaluation  allows us to turn off error bound calculation if it is not necessary (can save time in the Online stage).,0.0
d7abcd0,2011-05-17T02:51:02,Adding MeshTools::libmesh_assert_valid_elem_procids() test,0.0
4bf8b3a,2011-05-17T03:19:04,Fix for processor_id setting on subactive elements.  Adaptive coarsening on ParallelMesh still doesn't work (at the very least it needs DofObject communication) but it gets further now.,1.0
1.2e+18,2011-05-17T14:52:29,Fixed typos when !LIBMESH_HAVE_BOOST..,1.0
0b4eff2,2011-05-17T22:22:41,Fix MeshModification::distort() and MeshModification::scale() for ParallelMesh,0.0
0449dd8,2011-05-17T22:30:14,Marking a couple more functions parallel_only(),0.0
7213cad,2011-05-18T05:12:50,A couple more ParallelMesh fixes... these aren't actually distributed mesh specific  just corner cases I've never managed to trigger with a SerialMesh,0.0
34320bd,2011-05-18T05:30:19,BoundaryInfo::sync() works on any UnstructuredMesh  this should let apps choose between ParallelMesh and SerialMesh boundary meshes at runtime.,0.0
f7c2f4c,2011-05-18T15:15:15,Fix for --disable-amr,1.0
ee3c4d0,2011-05-18T17:08:02,Removed an assert which can be overzealous if triggered after coarsening but before partitioning,0.0
fcebe4b,2011-05-18T22:30:56,Support out-of-order and sparse add_elem on SerialMesh  this doesn't break anything and it's the easiest way to make some higher level code ParallelMesh/SerialMesh agnostic.,0.0
6e503db,2011-05-19T14:26:32,Fix for --disable-amr,1.0
13d968c,2011-05-19T22:45:16,New Parallel::StandardType<T> for more automatic generation and use of built-in and derived MPI types.,0.0
f4d5d51,2011-05-20T16:16:07,If Parallel:: functions expecting equal buffer sizes are passed inequal buffer sizes  in DEBUG mode we want to catch that with a nice libmesh_assert rather than relying on the mercy of the MPI stack for a comprehensible error message.,0.0
7d3b9c8,2011-05-20T19:55:18,Early return for a degenerate case,0.0
29c2d43,2011-05-20T21:16:59,Refactoring MeshOutputSerializer -> MeshSerializer,0.0
b064cf8,2011-05-21T03:51:30,Fixes for --disable-mpi,1.0
308753b,2011-05-23T15:28:21,Added inline libmesh_ignore() utility function.,0.0
07cb552,2011-05-23T17:10:34,A fix for an unlikely degenerate case  plus a similar fix for a just-introduced bug.,1.0
0e9dd5a,2011-05-23T22:12:28,Added MeshTools::libmesh_assert_valid_stuff_some_more to aid in ParallelMesh restart debugging,0.0
db00647,2011-05-24T04:02:38,libmesh_assert_valid_refinement_tree is no longer overzealous on a distributed mesh,0.0
e2a25b1,2011-05-24T04:23:17,A little more debugging for delete_remote_elements and MeshCommunication::redistribute.,0.0
89d6b53,2011-05-24T16:02:36,print system number,0.0
eae024c,2011-05-24T16:18:57,add a function to remap subdomain ids,0.0
3d9a33a,2011-05-24T16:21:12,Provide a way to support >65 534 processors,0.0
c8a0864,2011-05-24T16:45:25,Fix recalculate_n_partitions() to work with ParallelMesh,1.0
325dafe,2011-05-24T16:47:39,Make MeshSerializer default to true  for slightly cleaner syntax in non-MeshOutput uses.,0.0
68e8286,2011-05-24T16:49:02,Fix a buggy was-supposed-to-be-temporary mesh serialization by replacing it with MeshSerializer,1.0
e7a5826,2011-05-24T16:49:57,Fix typo in comment,0.0
8ca215d,2011-05-24T16:57:48,Parent processor ids need to be based on (and only on) their active descendants,0.0
2d8097a,2011-05-24T20:45:53,Fix for make_links_to_me_remote() with boundary elements,1.0
126dc1f,2011-05-24T20:47:22,Additional debugging in delete_remote_elements  and fixes for boundary meshes,0.0
485ab95,2011-05-24T20:59:50,Major rbOOmit change: Reorganized code so that RBEvaluation does not refer to RBSystem. RBBaseSystem and RBEvaluation both inherit from RBBase  which defines a parameter domain and stores an RBThetaExpansion object. Also  we now store data for a temporal discretization in a TemporalDiscretization object to avoid duplication between TransientRBSystem and TransientRBEvaluation.,0.0
856e855,2011-05-24T21:08:35,Add -Wextra warnings for gcc,0.0
690aa92,2011-05-24T21:09:24,Fix for one parallel.h unused variables warning  John is working on the fix for the other.,1.0
27dc837,2011-05-24T21:23:19,Keep the ParallelMesh max_*_id counts in sync after partitioning,0.0
300e8c9,2011-05-24T22:25:38,Fix new assertion,1.0
9384c4c,2011-05-24T22:46:03,Marking a parallel_only function,0.0
49e83f6,2011-05-25T01:46:35,rbOOmit change: Removed redundant call to build_temporal_discretization in transient_rb_system.C,0.0
c964faa,2011-05-25T01:54:50,Corrected comment in ex23.C,0.0
1dbf11c,2011-05-25T14:06:09,Removed unnecessary includes in rb_base.C,0.0
975145c,2011-05-25T14:07:01,allow for point value to optionally return 0 if the point is not found.  this is required for example when comparing TC stacks to an ablator problem where a TC eventually burns out and leaves the domain.,0.0
9480bd9,2011-05-25T17:13:13,Add insist_on_success option to System::point_gradient/hessian  too,0.0
7ca0523,2011-05-25T18:04:16,ex10 finally passed my tests with ParallelMesh  let's get that into regression tests now.,0.0
75096c7,2011-05-25T19:52:04,Make BoundaryInfo::sync() ParallelMesh-friendly  always keep boundary mesh partitioning to match interior mesh  and refactor multiple sync() variants to use one code path.,0.0
5865213.0,2011-05-26T17:09:33,We can return const references from const methods - that should be just as cheap for an inline function and it makes Parallel:: operations on these objects easier.,0.0
0e59ffb,2011-05-26T17:43:17,A few refactoring tweaks to StandardType  plus a change to catch compile-time errors using it.,0.0
6e388bf,2011-05-26T17:47:34,Add (and use) Parallel:: support for our 3-vectors and 3x3-tensors,0.0
02bb036,2011-05-26T18:26:01,rbOOmit change: Replaced function pointer parametrized_function_ptr by a functor class ParametrizedFunction in RBEIMSystem.,0.0
14becd5,2011-05-26T19:48:33,Support (and use) Parallel:: operations on Points,0.0
fec7b23,2011-05-26T19:55:32,Parallel::set_union works now  so we can use it for Nemesis,0.0
adffc4f,2011-05-26T21:16:01,Hilbert indices are *unsigned* ints.,0.0
c4f78dd,2011-05-27T03:44:55,rbOOmit change: Cleaned up recent changes a bit. RBThetaExpansion no longer stores a parameter reference  it is a more pure functor-like object now where parameters get passed in. In RBBase  rb_theta_expansion is now a raw pointer rather than AutoPtr since we may want to share the pointer (shared_ptr may ultimately be better). eval_theta_q functions are now in RBThetaExpansion  not in RBBase.,0.0
618a987,2011-05-27T13:57:17,Modified white space in rb_theta_expansion.C,0.0
484090b,2011-05-27T19:34:55,Cleaned up whitespace for consistency in transient_rb_theta_expansion.C,0.0
3ab8711,2011-05-27T21:15:34,rbOOmit change: Further improvements to the rbOOmit API  related to separation of Construction and Evaluation stages. We now only call RBSystem::initialize_RB_system if we need to do truth-dependent calculations  for Online (evaluation) calculations  we do not need RBSystem::initialize_RB_system  we just use an RBEvaluation instead.,0.0
53061f4,2011-05-31T14:34:07,more readable print_info(),0.0
57ba14e,2011-05-31T18:05:57,Let's just use Hilbert::inttype and not make assumptions about how it was configured.,0.0
82dc070,2011-05-31T19:06:44,"Remove static libraries before archiving objects into them - otherwise with ""ar rv"" the binary output of deleted source files never gets removed!",0.0
c523e3b,2011-06-01T18:40:49,rbOOmit change: rearranged headers a bit,0.0
3d9b111,2011-06-01T23:22:47,Fixes for --disable-mpi,1.0
5f7e147,2011-06-03T16:34:52,Avoid warnings in non-double-precision cases,0.0
e8206f0,2011-06-03T16:44:41,Fix for --disable-second,1.0
be1cea7,2011-06-03T21:10:52,Performance improvements for find_*_neighbors  and a new find_point_neighbors version for finding neighbors at just one point,0.0
0b752eb,2011-06-05T02:06:43,rbOOmit change: Got rid of initialize_mesh_dependent_data flag in RBSystem  it is no longer necessary now that RBEvaluation has been separated from RBSystem.,0.0
ce8bbb7,2011-06-06T01:31:48,rbOOmit change: Modified RBSystem so that by default it just has one pointer to an RBEvaluation  since this is the most relevant default case. Derive from RBSystem to use than one RBEvaluation.,0.0
dc5a9b0,2011-06-06T03:34:46,rbOOmit change: RBSystem no longer deletes rb_eval in the destructor.,0.0
430fa9e,2011-06-06T03:49:43,Changed reference to pointer in rb_system.C,0.0
7feffe1,2011-06-06T17:13:10,Cleaned up some commenting in rbOOmit,0.0
1988415.0,2011-06-06T19:18:38,Fixing sidesets on Prisms with adaptivity,1.0
49d99da,2011-06-07T21:35:30,Fix System::update() workaround.  This should still employ the fix that Derek put in for parallel->ghosted update()  it should fix any similar bug with other uses of localize()  and it should fix the Trilinos and noMPI regressions that the previous workaround had caused.,1.0
1ceb9d3,2011-06-08T17:24:00,rbOOmit change: Renamed RBSystem to RBConstruction. This name is much more appropriate because now the code is structured so that the Evaluation stage is encapsulated in RBEvaluation  and RBConstruction handles Construction of an RB space.,0.0
dbc1254,2011-06-08T18:38:21,"Fix for overzealous assert David Andrs caught  if processor 0 has no DoFs then it's ""last DoF index"" ends up being UINT_MAX.",1.0
f850218,2011-06-08T20:22:40,Removed redundant print statement,0.0
2be893b,2011-06-08T20:30:54,indenting fix,0.0
7cf2311,2011-06-09T16:07:48,make_dependencies should work for c files too,0.0
7bc0131,2011-06-09T17:32:42,Make it possible to instantiate a base System,0.0
2a22077,2011-06-09T17:33:04,TransientBaseSystem for Derek,0.0
e819840,2011-06-09T17:34:25,.depend should also include the .c files  and depends on every file it scans,0.0
b3adbe9,2011-06-09T17:36:00,Relying on GNU Make to auto-regenerate .depend based on its include line seems to work better than putting it in .PHONY  this seems to fix the problem where Make would update .depend every time but would use the pre-updated version.,0.0
2533d1b,2011-06-09T18:00:18,"Added ""ignore_warnings.h"" and ""restore_warnings.h""  so we can keep the libMesh warning levels cranked up even in the presence of less clean headers.  With my gcc 4.5 version this is at least enough to shut up ""unused variable"" warnings from the MPI headers  gcc 4.6 and later ought to be more useful still.",0.0
55c21b3,2011-06-09T19:10:42,No need for meshtool to abort just because we printed the usage message,0.0
7a91079,2011-06-09T20:00:39,More informative error message,0.0
998c693,2011-06-09T21:50:15,Intel compilers lie about being __GNUC__,0.0
f2e4101,2011-06-09T22:34:19,Minor bugfixes for Trilinos algebra.  This fixes the ex19 regression and make the trilinos nonlinear solver compatible with Ben's new function-object interface.,0.0
25cf8ce,2011-06-09T22:49:33,Added meshbcid utility,0.0
155ce03,2011-06-10T15:24:02,expose petsc callbacks and allow users the option to call SNESSetJacobian on their own,0.0
25f6965,2011-06-10T15:24:18,allow assignment between ghosted and serial petsc vectors,0.0
ad52558,2011-06-10T15:24:33,Ghosted solution has to be closed on System::update,0.0
ac95f2c,2011-06-10T17:20:14,New app to update element subdomain IDs  sideset IDs and nodeset IDs,0.0
6201259.0,2011-06-10T17:28:22,Close solution vectors before system update,0.0
cb43805,2011-06-10T17:44:22,Fixing shameful bug from previous commit.,1.0
3a70760,2011-06-10T18:00:03,Make sure examples/*/.depend get updated when necessary,0.0
bb0131c,2011-06-10T18:55:12,Moving close() of ghosted vectors from System::update() into PetscVector,0.0
e9f1ebb,2011-06-10T23:15:10,Adding Elem::opposite_node and Elem::opposite_side functions  useful for us benighted souls working on semi-structured grids.,0.0
f4658dd,2011-06-13T17:11:35,Fix slightly outdated ExodusII API where future patch will be applied,1.0
81d0d29,2011-06-13T22:29:28,Updated .gitignore.,0.0
e7ab1a7,2011-06-14T19:53:28,Updates to TetGenMeshInterface:,0.0
8cbd144,2011-06-15T16:01:06,Using MeshBase::sub_point_locator() can be much much cheaper than building a new tree from scratch.,0.0
e328798,2011-06-15T16:56:49,Avoid unused variable warning,0.0
98e80ad,2011-06-15T17:05:08,Add a PerfLog entry for PointLocatorTree - that can be awfully expensive sometimes...,0.0
4f0dcca,2011-06-15T17:12:36,Knowing when the tree fails and we're stuck with a linear search is useful for performance testing too,0.0
3ee98f1,2011-06-15T17:27:58,"Optimize Elem::contains_point for the ""often-false"" use case",0.0
ae66e56,2011-06-15T17:34:16,Disabling contains_point optimization for now - there's a false negative case possible.,0.0
4cd36a8,2011-06-15T17:48:42,Fixes (to commented out code...) for LIBMESH_DIM < 3,1.0
984e3dd,2011-06-15T18:03:53,Reenable contains_point() optimization  but only for first order elements,0.0
6ac5ccd,2011-06-15T20:48:49,Adding projection app,0.0
97e06f4,2011-06-16T00:34:59,Now Quad::opposite node returns correct values on *all four* sides! ...,0.0
39c454f,2011-06-16T13:33:32,"Need an explict include of ""libmesh_logging"" for some configurations",0.0
89f7890,2011-06-16T14:02:01,Don't try to allocate size zero arrays.,0.0
1506ccf,2011-06-16T14:02:17,Loop with node iterators rather than sequentially with integers.  This is the most general and correct way to loop over nodes.,0.0
58047ab,2011-06-16T14:21:34,Fix unused variable warning in DEBUG mode.,1.0
f69c134,2011-06-16T16:15:35,optimize DenseMatrix::zero(),0.0
8832cd5,2011-06-16T18:54:35,Fixes for LaplaceMeshSmoother.,1.0
8459ee7,2011-06-16T20:51:39,Include proper system headers for memset.,0.0
9af3e1a,2011-06-16T21:26:54,TriangleInterface updates.,0.0
b4102a2,2011-06-16T21:47:09,rbOOmit change: changed TransientRBConstruction and TransientRBEvaluation so they store a TemporalDiscretization (rather than a pointer to one). Renamed RBEvaluation::initialize to resize_data_structures. Moved parameter range out of RBBase  parameter ranges are now only in RBBaseConstruction since we train an RB space with a parameter domain in mind.,0.0
bd3b0ec,2011-06-16T22:35:15,Don't forget to calculate the extra derivative terms for 1D elements that aren't parallel to the x axis,0.0
4df4cd7,2011-06-16T22:47:53,Constructing bare System objects is more useful if we can load restart files with them  too...,0.0
f72f59a,2011-06-16T23:43:20,Adding ex29.,0.0
0fbc14f,2011-06-17T01:51:14,rbOOmit change: renamed RBBase to RBParametrizedObject  a more descriptive name... also renamed RBBaseConstruction to RBConstructionBase,0.0
04ad459,2011-06-17T02:11:33,rbOOmit change: commented out code for writing output data to a single file in RBEvaluation,0.0
e3ee461,2011-06-17T17:31:44,Small edit to RBConstruction::train_reduced_basis,0.0
e68a510,2011-06-17T17:42:01,It doesn't happen very often  but when we *do* change a contrib/ header we want to recompile the objects depending on it.,0.0
bfee618,2011-06-17T18:39:12,Disabling tetrahedralize_domain() until I can figure out why tetgen is infinite looping...,0.0
c3cdaa4,2011-06-17T19:22:17,"""BasicSystem"" -> ""Basic""  to be more consistent with the other system names.",0.0
28fe193,2011-06-17T19:42:45,BoundaryInfo can reset the mesh_dimension of the boundary mesh to keep it accurate.,0.0
00cd2c7,2011-06-17T20:48:31,rbOOmit change: Removed assert in RBParametrized object,0.0
6f56718,2011-06-18T04:26:08,Disable ex29 for --enable-1D-only,0.0
6e96283,2011-06-19T20:20:38,Removed redundant line in rb_construction.C,0.0
1bf62f5,2011-06-20T03:40:26,rbOOmit change: renamed RB_solve and initialize_RB_construction to all lower-case (to be more in line with standard naming practices). Also  initialize_rb_construction no longer takes an argument.,0.0
0a5e484,2011-06-20T13:21:12,Fixed comment in ex23,0.0
172c015,2011-06-20T15:25:31,Our triangle interface seems to fail with single or long double precision,0.0
271b51d,2011-06-20T16:10:17,Our triangle.c copy now includes libmesh_config.h to choose scalar precision.,0.0
b7af34e,2011-06-20T16:14:32,ex29 ought to work on non-double-precision libMesh now  let's try it.,0.0
8e99cb1,2011-06-20T16:20:55,Putting some notices up on the file we modified as well as on the README to better comport with the Triangle license.,0.0
b8a721c,2011-06-20T16:21:36,Adding -g  general flags to intel CFLAGS,0.0
3fe7e61,2011-06-20T16:36:01,configure built with new compiler.m4 changes,0.0
1856082.0,2011-06-20T16:59:42,Print a little more output,0.0
c2fdeb0,2011-06-20T17:18:06,Don't compile Triangle or Tetgen code when libMesh wasn't configured with Triangle/Tetgen enabled.,0.0
33fa547,2011-06-21T05:36:42,Differently-const versions of the same method shouldn't also be differently-protected.  That way lies madness.,0.0
e620507,2011-06-21T05:37:23,More assertions.  Yes  I wrote user code that would have tripped one of these.  No  I'm not proud.,0.0
8371901.0,2011-06-21T18:49:09,Disable gcc diagnostic pragmas for gcc 4.0 and 4.1  which don't support them.  These headers are supposed to be disabling warnings for 3rd party code  not adding warnings for our own code.,0.0
62f9a67,2011-06-21T19:06:47,Adding virtual destructor to Abstract Base Class,0.0
e9ba7c2,2011-06-21T19:19:40,whitespace fix,0.0
346b134,2011-06-21T19:20:52,On my Macbook we need template instantiation to follow all function definitions to prevent runtime dynamic linking failure,0.0
1da0185,2011-06-21T19:30:01,My Macbook's linker doesn't recognize one of those options and gives duplicate symbol errors with that object file.  Disabling them for gcc <= 4.0  which fixes things for me and hopefully shouldn't mess with the INL gcc 4.2 builds.,0.0
6090a1f,2011-06-22T15:01:27,libmesh_example_assert  ifdef  comment updates,0.0
c3960a2,2011-06-22T16:18:46,Fix VTK connectivity for TRI6.,1.0
32de6c9,2011-06-22T17:36:39,Fixes for writing VTK elements:,1.0
67910d4,2011-06-22T23:19:16,Add edge capabilities to FEMContext - the added cost should be trivial when edge_fe_reinit isn't called.,0.0
995d2ea,2011-06-23T16:03:18,Add proper dependences and inherit compiler flags for TetGen.,0.0
2dc99cb,2011-06-23T16:07:34,Add braces around empty body in while statement to pacify compiler.,0.0
c8c888f,2011-06-23T16:41:22,Added infinite loop detection and some simple bounds checking.,0.0
5fdeb7f,2011-06-23T16:46:00,Ignoring generated files in ex29.,0.0
bec60a6,2011-06-23T16:50:59,Fix warning about signed/unsigned comparison.,1.0
b18069b,2011-06-23T20:31:44,Added Makefile dependencies for contrib software:,0.0
cb86fd6,2011-06-24T22:32:12,Making comments more accurate - not all System assembly calls involve a matrix.,0.0
02d2c00,2011-06-24T22:41:36,switch around compiler options so users can override them,0.0
095981f,2011-06-25T06:52:27,"Fixes for the ""boundary id on internal sides"" case.",1.0
e40ebc1,2011-06-27T16:02:53,Added Eigen config stuff from David Knezevic.,0.0
dd2a85a,2011-06-27T19:04:36,rbOOmit change: added Parellel::barrier at start of basis function IO,0.0
ff13bed,2011-06-27T19:30:32,Look for Eigen headers in EIGEN_INC/Eigen rather than EIGEN_INC.  This makes more sense when #including them.,0.0
bdd81e2,2011-06-27T19:36:05,Fixed typo.,0.0
876b8f9,2011-06-27T19:52:18,Adding READ_BASIC_ONLY option to EquationSystems::read().  This is only a big win for projection.C  whose costs are still dominated by PointLocator's inverse_map tests  but getting rid of unnecessary sparse matrix allocation and sparsity pattern calculation shaves 80% off the runtime of some more app-specific utility programs I've got.,0.0
9da0005,2011-06-28T14:45:42,Removed redundant success status message from Eigen.,0.0
2b5ae15,2011-06-29T19:06:10,Working on a system for generating and using constraint data that's indexed by nodes  not just by dof indices.,0.0
b82da0a,2011-06-29T22:08:31,Try to print the *correct* average constraint length...,0.0
377d3b8,2011-06-29T22:19:25,Print Node constraints too,0.0
86120f1,2011-06-29T22:29:51,compute_node_constraints bugfix,0.0
1ce9782,2011-06-29T22:30:31,Computing NodeConstraints (except for periodic cases) now.,0.0
f03bbf5,2011-07-01T17:50:48,rbOOmit change: renamed low_memory_mode flag to more descriptive name: single_matrix_mode,0.0
50755000000000.0,2011-07-01T23:09:32,Try to compute node constraints in the periodic boundary case too.,0.0
ac89740,2011-07-04T19:25:30,Fix for nodal constraint construction on periodic BCs,1.0
3fa0e85,2011-07-04T20:34:48,Making NodeConstraints a configure-time option  default disabled,0.0
fbe5090,2011-07-04T21:01:33,Merged changes from trunk,0.0
363bbc8,2011-07-04T21:36:29,Merged in new NodeConstraints option from branch,0.0
41e3043,2011-07-05T16:10:27,Shut up unused variable warnings when !LIBMESH_ENABLE_NODE_CONSTRAINTS.,0.0
e7aa1ba,2011-07-05T17:09:15,Creating branch to work on changes to DiffContext/DiffSystem for use with Discontinuous Galerkin methods.,0.0
38299fa,2011-07-07T20:00:52,Get rid of some unnecessary code in NodeConstraints calculations,0.0
1489bed,2011-07-07T22:57:16,allgather with an empty r used to trigger a GLIBCXX_DEBUG assertion failure,0.0
550caf5,2011-07-08T01:44:58,point_* methods should accept a const Point.,0.0
6774d2f,2011-07-08T02:08:36,Tweak code for clarity,0.0
4973867.0,2011-07-08T02:44:37,NodeConstraints bugfix,1.0
4995624.0,2011-07-08T04:15:48,Commenting out overzealous asserts - non-processor-0 nodes are going to want to read and write zipped files in the parallel i/o cases.,0.0
2c441bc,2011-07-08T04:37:31,Make sure parallel-read-in vectors are closed after reading,0.0
504529a,2011-07-08T16:44:20,First cut at adding access to neighbor values to DifferentialSystem framework. This will come in handy for Discontinuous Galerkin simulations. I still need to debug and also add fixed* implementation.,0.0
d1e00ed,2011-07-08T17:33:23,If we make Parallel::verify() a no-op when called for types T that don't have MPI_MIN/MPI_MAX defined  then we can use it even in generic calls that aren't always instantiated with verifiable T.,0.0
4f7b6cc,2011-07-08T19:33:02,When we've got a non-serial Mesh  we should default to non-serial I/O unless the user says otherwise.,0.0
e1538bf,2011-07-08T20:38:36,Fixed a memory access out of range error that showed up when trying to access neighbors on the boundary. Also implemented DiffSystem constructing DiffContext with compute_neighbor_values.,1.0
90728c2,2011-07-08T21:22:10,First cut at adding neighbor information to DiffSystem/DiffContext for Discontinuos Galerkin simulations.,0.0
270f009,2011-07-08T21:39:54,Adding an extra flag to help oprofile,0.0
23ad00e,2011-07-09T16:28:05,rbOOmit change: pulled printing out from process_parameters_file and put it in a new function  print_info,0.0
72352000000000.0,2011-07-09T18:01:13,rbOOmit change: Renamed load_RB_solution to load_rb_solution (for consistency of function names...),0.0
e829432,2011-07-09T18:43:41,rbOOmit change: rb_solve now returns a non-normalized (i.e. absolute) error bound. Renamed flag return_rel_error_bound to use_relative_bound_in_greedy  and this is only used inside RBConstruction now  not passed to RBEvaluation.,0.0
62d509d,2011-07-09T18:55:43,rbOOmit change: Need to set compute_RB_inner_product = true in TransientRBEvaluation ctor,0.0
e2c4783,2011-07-11T16:52:46,Modifications to ex29 to get it working under Linux.,0.0
fc5c9f7,2011-07-11T18:22:14,Split TetGenWrapper class into its own header file.,0.0
756ef4f,2011-07-11T18:51:40,Moved MeshSerializer class to its own file.,0.0
24e6a01,2011-07-11T22:50:56,Split out the TriangleInterface::Hole classes into a separate file.,0.0
3ecb0ff,2011-07-12T14:21:31,ExodusII update that enables writting out zero IDs to the output file,0.0
1832eb6,2011-07-12T15:10:56,Added Makefile dependencies for new ExodusII files.,0.0
47213ce,2011-07-12T17:49:03,rbOOmit change: removed impose_internal_dirichlet_BCs and impose_internal_fluxes from the set of parameters that are read in from input file in process_parameter_file. These parameters should be set programmatically in a class since they effect the assembly behavior significantly.,0.0
3c1d5d8,2011-07-12T18:51:44,get rid of include/mesh/mesh_generation.h:133:8: warning: extra tokens at end of #endif directive,0.0
c2e4cf7,2011-07-13T19:25:55,My Macbook's linker doesn't recognize one of those options and gives duplicate symbol errors with that object file.  Disabling them for gcc <= 4.0  which fixes things for me and hopefully shouldn't mess with the INL gcc 4.2 builds.,0.0
6a715d2,2011-07-13T19:26:18,libmesh_example_assert  ifdef  comment updates,0.0
7587718.0,2011-07-13T19:26:25,Fix VTK connectivity for TRI6.,1.0
42ead08,2011-07-13T19:26:34,Fixes for writing VTK elements:,1.0
9ce94a1,2011-07-13T19:26:44,Add edge capabilities to FEMContext - the added cost should be trivial when edge_fe_reinit isn't called.,0.0
ad1a399,2011-07-13T19:26:52,Add proper dependences and inherit compiler flags for TetGen.,0.0
38a5dfa,2011-07-13T19:27:00,Add braces around empty body in while statement to pacify compiler.,0.0
5c35452,2011-07-13T19:27:08,Added infinite loop detection and some simple bounds checking.,0.0
4a7a3ae,2011-07-13T19:27:15,Fix warning about signed/unsigned comparison.,1.0
812474b,2011-07-13T19:28:31,Added Makefile dependencies for contrib software:,0.0
7a3eda3,2011-07-13T19:28:42,Making comments more accurate - not all System assembly calls involve a matrix.,0.0
ccbcd0f,2011-07-13T19:28:48,switch around compiler options so users can override them,0.0
7f6c3ac,2011-07-13T19:28:56,"Fixes for the ""boundary id on internal sides"" case.",1.0
1ddfd76,2011-07-13T19:29:08,Added Eigen config stuff from David Knezevic.,0.0
da47e90,2011-07-13T19:29:16,rbOOmit change: added Parellel::barrier at start of basis function IO,0.0
a50ee42,2011-07-13T19:29:23,Look for Eigen headers in EIGEN_INC/Eigen rather than EIGEN_INC.  This makes more sense when #including them.,0.0
53d4a78,2011-07-13T19:29:30,Fixed typo.,0.0
4368497.0,2011-07-13T19:29:43,Adding READ_BASIC_ONLY option to EquationSystems::read().  This is only a big win for projection.C  whose costs are still dominated by PointLocator's inverse_map tests  but getting rid of unnecessary sparse matrix allocation and sparsity pattern calculation shaves 80% off the runtime of some more app-specific utility programs I've got.,0.0
87b72ee,2011-07-13T19:29:50,Removed redundant success status message from Eigen.,0.0
e3a8ace,2011-07-13T19:29:58,Try to print the *correct* average constraint length...,0.0
8d78f72,2011-07-13T19:30:09,rbOOmit change: renamed low_memory_mode flag to more descriptive name: single_matrix_mode,0.0
c2576c2,2011-07-13T19:30:21,Merged in new NodeConstraints option from branch,0.0
364c501,2011-07-13T19:30:30,Shut up unused variable warnings when !LIBMESH_ENABLE_NODE_CONSTRAINTS.,0.0
340761b,2011-07-13T19:30:37,Get rid of some unnecessary code in NodeConstraints calculations,0.0
680fcb2,2011-07-13T19:30:45,allgather with an empty r used to trigger a GLIBCXX_DEBUG assertion failure,0.0
24cdb40,2011-07-13T19:30:54,point_* methods should accept a const Point.,0.0
5bf2f5a,2011-07-13T19:31:02,Tweak code for clarity,0.0
adeef00,2011-07-13T19:31:10,NodeConstraints bugfix,0.0
0b67a69,2011-07-13T19:31:18,Commenting out overzealous asserts - non-processor-0 nodes are going to want to read and write zipped files in the parallel i/o cases.,0.0
5b3b31f,2011-07-13T19:31:26,Make sure parallel-read-in vectors are closed after reading,0.0
9d5212c,2011-07-13T19:31:37,First cut at adding access to neighbor values to DifferentialSystem framework. This will come in handy for Discontinuous Galerkin simulations. I still need to debug and also add fixed* implementation.,0.0
ef6c330,2011-07-13T19:31:46,If we make Parallel::verify() a no-op when called for types T that don't have MPI_MIN/MPI_MAX defined  then we can use it even in generic calls that aren't always instantiated with verifiable T.,0.0
ce6df11,2011-07-13T19:31:54,When we've got a non-serial Mesh  we should default to non-serial I/O unless the user says otherwise.,0.0
e99b60e,2011-07-13T19:32:01,Adding an extra flag to help oprofile,0.0
a9e2a05,2011-07-13T19:32:13,rbOOmit change: pulled printing out from process_parameters_file and put it in a new function  print_info,0.0
ac252b4,2011-07-13T19:32:25,rbOOmit change: Renamed load_RB_solution to load_rb_solution (for consistency of function names...),0.0
de581aa,2011-07-13T19:32:38,rbOOmit change: rb_solve now returns a non-normalized (i.e. absolute) error bound. Renamed flag return_rel_error_bound to use_relative_bound_in_greedy  and this is only used inside RBConstruction now  not passed to RBEvaluation.,0.0
b7dc89e,2011-07-13T19:32:47,rbOOmit change: Need to set compute_RB_inner_product = true in TransientRBEvaluation ctor,0.0
9aa57d2,2011-07-13T19:32:58,Modifications to ex29 to get it working under Linux.,0.0
81f20d8,2011-07-13T19:33:11,Continuing to implement compute_neighbor_values in DiffSystem framework. Worked on constructors for DiffContext/FEMContext and added neighbor code to FEMSystem::assembly. Cleaned up some dirty formatting.,0.0
d04dced,2011-07-13T19:57:29,Removing mucked up branch,0.0
221379.0,2011-07-13T19:57:53,Removing mucked up branch,0.0
bb5640b,2011-07-14T14:26:37,Creating branch to work on Discontinuous Galerkin in DiffSystem framework,0.0
a563b6d,2011-07-14T15:14:55,Worked on FEMSystem::assembly to add neighbor calculations. Also added a reference to System in DiffContext. Several other changes to implement compute_neighbor_values.,0.0
f853767,2011-07-14T21:26:16,Added element-neighbor cross-terms in jacobian for compute_neighbor_value in DiffSystem.,0.0
e70475d,2011-07-15T20:42:35,edited developers.php,0.0
8dd9207,2011-07-15T20:51:39,Updated djk.jpg,0.0
f0bd09a,2011-07-18T22:00:25,Added neigh-elem jacobian contributions to fem_system.C for use in DG problems.,0.0
6.789e+81,2011-07-18T22:00:37,Renamed some neighbor_ variables to be more consistent.,0.0
b0c37bf,2011-07-18T22:01:13,Create branch master,0.0
0e3a085,2011-07-18T22:02:55,deleted extra branch,0.0
cf0185c,2011-07-19T03:35:15,asserts and const-correctness in NodeConstraints code  disabling an allgather in that code which currently fails badly on ParallelMesh,0.0
a520054,2011-07-19T17:20:43,No need to specify non-basic node iterators,0.0
a0f9d72,2011-07-19T17:22:18,Exposing parallel_n_{elem nodes} to MeshBase users,0.0
5fd0841,2011-07-19T17:39:39,Removing empty/typoed header,0.0
e2ad2f1,2011-07-19T18:26:12,We ought to be able to write Nemesis files from SerialMesh data structures too eventually  if only for testing purposes.,0.0
c3461ad,2011-07-19T18:26:51,"Fix for ""no sidesets"" case",1.0
12073b7,2011-07-19T20:06:02,If we try to write out a hybrid subdomain using Exodus/Nemesis IO that still doesn't support that  we ought to die at an assert which explains that.,0.0
4afc5a8,2011-07-19T21:10:38,Nemesis IO: Handle some empty-vector-producing corner cases,0.0
61b072a,2011-07-19T21:32:18,Implemented some more changes for DG. Notably worked on numerical_jacobians in FEMSystem.,0.0
ac5c0ec,2011-07-19T22:37:04,"Some fixes (but not enough yet  is this even possible with Nemesis?) for the ""writing out Nemesis when you have processors containing no elements"" corner case.",1.0
4cdb851,2011-07-20T05:18:02,That new assertion needs to be less zealous unless we want to forbid Exodus/Nemesis output with infinite elements,0.0
5a223eb,2011-07-20T21:49:16,We need to support separate-file parallel xdr/xda meshes eventually  and here's the API I'd like to use for deciding when to write in parallel vs serial.  Going to have to put implementation on the back burner for a little while  though...,0.0
56d6720,2011-07-21T20:05:35,Added neighbor norm calculations to verify_jacobians. Also added code to constrain neighbor residuals and jacobians (this code may be incorrect  it definitely needs to be double-checked). It appears that the numeric jacobian is not calculation elem-neighbor cross terms. Need to fix this.,0.0
442af60,2011-07-21T20:41:28,Working on fixing numerical jacobian element-neighbor cross-terms. Still needs work.,0.0
5792cf9,2011-07-22T16:36:16,Documentation fix.,0.0
0b9c6f1,2011-07-22T18:42:01,Fixed some issues with numerical_jacobian and neighbor-element cross-terms.,1.0
21e9b52,2011-07-22T19:01:38,Cleaned up some TODOs,0.0
26b2ce0,2011-07-22T20:27:26,"Dispatch to NemesisIO if UnstructuredMesh is asked to read/write a "".n"" or "".nem"" file",0.0
c9db6d6,2011-07-22T20:29:14,Pre-test for all files' existence in the case of parallel mesh files.,0.0
2ebc4f4,2011-07-26T13:47:02,Updated publications for July 2011.,0.0
f920a9c,2011-07-27T13:42:40,EquationSystems::read() modifies only systems in the XDA file,0.0
6516f1c,2011-07-28T18:16:12,allow resticting which variables get output from Exodus,0.0
d964132,2011-07-28T21:02:58,rbOOmit change: Added method to attach a full affine expansion to a RBConstruction object,0.0
743940000.0,2011-07-28T21:38:38,rbOOmit change: cleaned up RBConstruction::attach_affine_expansion,0.0
2640df3,2011-07-28T23:26:13,rbOOmit change: removed RBConstruction::initialize_rb_eval  since it was too focused on the case in which we define an RBThetaExpansion in the RBConstruction and pass it to an RBEvaluation. We often want to go the opposite direction.,0.0
11177f9,2011-08-01T18:29:44,White space in these comment diagrams made vim syntax highlighting think there was an error...,0.0
ab389a6,2011-08-01T19:04:15,Avoid warning about unsigned/int comparison.,0.0
36e3bc4,2011-08-01T20:46:08,Patch from Jed Brown: * Use public Local-to-global mapping APIs,1.0
89aa9e7,2011-08-01T20:46:59,Patch from Jed Brown: * Update for the new XXDestroy() API coming in PETSc 3.2,1.0
4628991.0,2011-08-01T22:52:31,rbOOmit change: Added RBAssemblyExpansion class  analogous to RBThetaExpansion class.,0.0
c326da8,2011-08-01T23:02:16,Patch  mostly from Lorenzo Botti  to allow for FE calculations on sides without using inverse_map in the common cases.,1.0
4e64b13,2011-08-01T23:43:16,ex23 chanage: Cleaned up main function by defining custom RBThetaExpansion and RBAssembly expansion classes.,0.0
eac2d61,2011-08-02T20:56:07,Starting over with DG implementation.,0.0
8f43264,2011-08-02T20:58:18,Removing dg2 branch,0.0
0720c73,2011-08-02T22:51:41,Starting work on DPGSystem and DPGContext.,0.0
1f93da0,2011-08-03T15:29:54,Removed some old work with DiffSystem/DiffContext for DG stuff. The plan is to refactor this into a DGSystem/DGContext eventually.,0.0
7585ce6,2011-08-03T16:43:17,rbOOmit change: changed RBConstruction gram-schmidt to modified gram-schmidt (thanks to A. Gerner),0.0
7163940.0,2011-08-03T20:56:59,Cast to int for comparison with enums so compiler doesn't complain.,0.0
771cf4a,2011-08-03T22:40:23,Read and store node and elem attributes in TetGenIO.,0.0
d4e22e1,2011-08-04T16:56:27,Fixed some minor indentation issues.,0.0
1caafff,2011-08-05T17:34:39,Updated google analytics info.,0.0
2.6e+107,2011-08-05T22:23:34,"Make QoISet::add_index/remove_index behavior consistent with ""indices all start set to true"" behavior",0.0
9ac5851,2011-08-09T14:45:40,Added discontinuous hierarchical finite element: L2_HIERARCHIC.,0.0
2a95a3b,2011-08-09T16:46:10,Utility to renumber blocks/sidesets/nodesets in exodus meshes,0.0
185360000.0,2011-08-09T18:36:24,ExodusII_IO/Nemesis_IO patch for zero IDs,0.0
8cba54e,2011-08-09T21:03:00,Subdomain_id_size is configurable: 1  2  or 4 bytes (default = 2),0.0
8dc02f3,2011-08-10T16:30:35,Disable ex10 and ex24 with parmesh until we've got better parallel xdr I/O added.,0.0
16ffce0,2011-08-10T21:25:46,Changes to GMVIO: * Made GMVIO work with ParallelMesh input via MeshSerializer. * Factored out a bunch of cut-n-paste code into a single function. * Fixed bug in eletypes definition for TET4 writing. * Properly read in elements using node maps.,0.0
8bed96f,2011-08-11T18:03:36,Patch from Boyce Griffith for clean opt-mode compiles if the user has extra warnings enabled.,1.0
31042a4,2011-08-11T22:08:46,Requesting ILU/LU in parallel on the PetscPreconditioner now sets block Jacobi parallel preconditioner + ILU/LU sub-preconditioner.,0.0
b438ffc,2011-08-11T22:11:45,Ignoring generated files.,0.0
2a10aed,2011-08-14T23:22:07,meshid guts don't compile without --enable-exodus,0.0
e63ccba,2011-08-18T17:07:21,Added test_variable functions to dpg_system.,0.0
f2a8c4d,2011-08-19T19:55:49,Documentation update.,0.0
3867aa1,2011-08-19T20:13:33,Print slightly more information when a NetCDF error is raised.,0.0
bac8fb9,2011-08-19T21:42:47,The meshid application can now be used to change the dimension on an Exodus file with e.g.,0.0
c9c7daf,2011-08-21T13:08:13,Fix for --enable-single,1.0
4f686ab,2011-08-23T17:32:38,Flag Fix for Implicit warnings in C++ DBG/DVL compiles,1.0
6a2d4cc,2011-08-24T22:11:19,Removing debug warnings,0.0
6f4713b,2011-08-25T15:13:32,Fix to PHP files  hopefully detect Linux+Chromium browsers.,1.0
825c1e9,2011-08-25T17:41:24,Updated .gitignore for documentation.,0.0
fd647a1,2011-08-25T20:36:16,Do some logging of output functions,0.0
14fb37a,2011-08-25T22:22:42,Minor attempts at optimization,0.0
23a76f1,2011-08-25T22:23:17,A little more perf logging,0.0
c10aeba,2011-08-25T22:32:02,Added entries for examples 28 and 29 to navigation menu.,0.0
750830000.0,2011-08-25T22:51:45,"Adding a user defined hook in Petsc_nonlinear_solver right before ""solve"". This is necessary for setting the ""post check line search"" option and perhaps others in Petsc 3.1",0.0
d6aa0c2,2011-08-25T22:59:13,Adding extra content div's in the header and footer seems to fix the Classes/Namespaces/Files pages and not hurt anything else too bad.,0.0
85db425,2011-08-26T14:50:41,Deleting old trumanellis branch.,0.0
e20baa8,2011-08-26T17:03:57,People might want a user_presolve for non-PETSc-specific tasks too,0.0
909e8d2,2011-08-26T18:15:22,System::point_* should be const.  Also  in debug mode they ought to verify that they're called with the same point on each system.,0.0
e9addd4,2011-08-26T20:05:03,Added L2_HIERARCHIC finite element as a discontinuous HIERARCHIC.,0.0
dc02a33,2011-08-26T20:27:06,Forgot to add header files for new L2_HIERARCHIC finite elements.,0.0
133351c,2011-08-26T20:39:47,Added L2_HIERARCHIC to string_to_enum. Sorry for the partial broken commits  everything should be working now.,0.0
e6e826a,2011-08-29T14:45:55,Avoid unused variable warnings in debug mode.,0.0
bf8529e,2011-08-29T14:51:25,Enable SVN keyword expansion in all files.,0.0
747a26e,2011-08-29T15:51:16,Fix for disabling second derivatives,1.0
e4aa718,2011-08-29T18:42:34,Reverted accidental expanded RCS keyword check-in.,0.0
34510ea,2011-08-30T19:17:58,Fixing Parallel:broadcast of std::set,1.0
1b8a673,2011-08-30T19:18:24,Storing subdomain ids in and XDA solution file,0.0
3571682.0,2011-08-30T19:39:38,Removed old code from previous attempt at building DG into FEMSystem. A better approach would be to inherit to DGSystem. Everything should be clean now.,0.0
f44eda1,2011-08-30T20:47:09,Do not use assign() on std::set - it does not exist,0.0
86b72cd,2011-08-30T21:24:51,Updating Fortran flags for PIC code (shared libraries),0.0
6a4fc2c,2011-08-30T22:27:20,Avoid signed/unsigned comparsion warning  string::find() returns string::size_type.,0.0
f27a29b,2011-08-31T21:31:25,Patch from Vijay Mahadevan updating SLEPc to new XXXDestroy syntax.,1.0
32e9003,2011-08-31T21:31:37,Patch from Vijay Mahadevan adding paths for SLEPc include files.,1.0
9f0b396,2011-08-31T21:31:48,Fix cut and paste bug in SLEPc section of Make.common.in.,1.0
76a36a6,2011-08-31T21:32:02,Don't let arbitrary default values make it into Make.common.,0.0
442a3c9,2011-09-01T17:05:04,Fixing footer/header for doxygen generated docs,1.0
3bba2f0,2011-09-01T22:11:14,Fix regression on SLEPc 3.1.0,1.0
c2dc2fd,2011-09-01T23:13:17,Don't override slepc_common_variables SLEPC_LIB  or linking against SLEPc breaks,0.0
03efdea,2011-09-02T02:32:42,Autodetecting SLEPc on Ubuntu was a feature.  Features are good. Regressions are bad.,0.0
51d50d2,2011-09-02T16:32:08,Unset SLEPC_DIR if default is not found to avoid arbitrary defaults in Make.common.,0.0
c54d32e,2011-09-07T18:04:14,Fixing bug in writing zero-length vectors in XDA,1.0
228b367,2011-09-07T19:18:28,Fixing test for HYPRE in Petsc 3.0 for environments with $PETSC_ARCH set,1.0
0058b82,2011-09-15T13:57:43,Adding support for Trilinos 10.6.4,0.0
2f1a0a7,2011-09-19T15:42:02,updated configure for intel 12.1 - it was being detected as gcc,0.0
b4bb8f4,2011-09-19T18:22:54,fixed broken link,1.0
e65bfd2,2011-09-19T21:31:16,added callback to allow sparsity pattern modification,0.0
9fbbc83,2011-09-19T21:31:36,add ability to get number of linear iterations out of petsc nonlinear solver,0.0
b95e252,2011-09-22T23:06:09,Git rid of Metis warnings,0.0
c127484,2011-09-23T18:19:57,Take CFLAGS from environment  not just CXXFLAGS/CPPFLAGS,0.0
94ba114,2011-09-23T18:22:44,We need to filter-*out* -Wimplicit.  Filtering out everything else instead breaks some configurations when we lose -fPIC.,0.0
12d53d2,2011-09-28T15:34:47,Improving AztecOO solver capabilities,0.0
257713f,2011-09-28T15:35:17,Improving capability of NOX solver wrapper,0.0
e3513f2,2011-09-28T15:35:44,Adding support for Trilinos ML package,0.0
97bbfb9,2011-09-28T15:35:56,Do not try configure with Trilinos 9 if Trilinos 10 found,0.0
e3ca76a,2011-09-28T15:36:18,Implementing get_total_linear_iterations() in Trilinos nonlinear solver,0.0
87e5cf4,2011-10-03T16:03:27,Fix NodeConstraints std::allocator use (and the resulting compilation bug on my MacBook),1.0
978d9ee,2011-10-03T17:26:59,Patch from Paul Bauman for 1D ExodusII output,1.0
9009394.0,2011-10-06T21:03:21,Fix overzealous assert in extract_local_vector,1.0
bccf707,2011-10-06T21:03:42,More debugging output when we try to request a non-ghosted DoF from a ghosted vector,0.0
a966429,2011-10-06T22:52:08,Patch to fix ExodusII error from Paul,1.0
c6bbc3a,2011-10-06T23:18:40,Make it possible to System::init() on an existing system (useful if you want to keep structure but not data) multiple times without ending up with PETSc errors afterward.,0.0
b078e5f,2011-10-07T03:20:20,Added missing header (thanks to Paul Bauman),0.0
dcb8e17,2011-10-07T03:20:53,Avoid signed/unsigned comparison warning,0.0
c7ccf47,2011-10-07T19:26:36,Fix a slight leakage of encapsulation,1.0
02ed2e7,2011-10-07T22:36:18,Use subclass member arrays rather than base class dynamically-allocated arrays for _nodes  _neighbors  and _parent links.,0.0
b114d16,2011-10-08T03:35:47,Support a real interior_parent() pointer on lower-dimensional Elems,0.0
09d12b1,2011-10-08T05:24:50,BoundaryInfo::sync() should build a refined (even adaptively refined) boundary mesh when appropriate.,0.0
8db5567,2011-10-09T01:56:32,Added Elem::which_side_am_i utility method,0.0
1c2f7f2,2011-10-09T03:20:53,Fixes for BoundaryInfo::sync() to refined boundary,1.0
739472f,2011-10-10T03:21:02,Adding Elem::is_semilocal(),0.0
61f5cbf,2011-10-10T03:21:35,Adding semilocal-only Patch construction options,0.0
bba2ab8,2011-10-18T20:55:27,Adding the ability to build side lists from node lists,0.0
1f779c0,2011-10-18T23:04:45,More explicit template instantiation added to fe_map.C and another instantiation added to fe_macro.h,0.0
2b92fbd,2011-10-19T14:22:07,"Adding ""-r"" switch to remove the conftest directory during configure - this is causing errors in OS X 10.7",0.0
302eb87,2011-10-19T15:11:37,Removing trailing semi-colon from explicit template instantiation,0.0
5d2c2ce,2011-10-19T15:53:19,Added comment for GmshIO::read() suggested by Matteo Semplice.,0.0
ee152b4,2011-10-19T22:52:23,Make numerical jacobian utility methods public instead of protected. They're needed by the TBB functor classes I'm about to put in fem_system.C  and there's really no need to restrict them from use by anything else.,0.0
5748aee,2011-10-19T22:52:43,Adding multithreading support to FEMSystem,0.0
feaec0a,2011-10-20T17:40:07,Output better info about parallelism from MeshBase (although we ought to move this elsewhere eventually...),0.0
355f319,2011-10-20T17:53:42,Bandwidth printing should be less misleading when we're calculating bandwidth upper bounds,0.0
e63271d,2011-10-20T19:27:52,Use full precision for FEMSystem::print_* debugging  avoid redundant parallel synchronization,0.0
53092ba,2011-10-22T04:13:28,Access to the global perflog needs to be mutex'ed to be thread-safe.,0.0
8f6cb20,2011-10-24T13:22:09,Add missing header - we weren't building properly with barebones config,0.0
4a10414,2011-10-24T13:55:07,Fix constructor order warning,0.0
16465d8,2011-10-25T16:54:35,Locking libMesh::perflog isn't enough to stop bugs from out-of-order log start/stop commands when multithreading.  Nothing to do for now but turn off the perflog when we're running more than one thread.,0.0
65b3772,2011-10-25T18:31:03,Better fix for PerfLog/Threads interaction.  We were already doing the right thing most of the time  but when the user manually disabled logging we shouldn't have been reenabling it again.,0.0
cfbed58,2011-10-27T19:12:11,Updated publications.,0.0
9ccd13e,2011-10-27T21:39:30,vector::iterator::difference_type doesn't seem to be in Stroustrop  but vector::difference_type is and Portland Group C++ likes that better.,0.0
61236f7,2011-10-27T23:21:21,We can't use -Wno-deprecated unless the compiler supports it. Portland Group C++  in particular  screams and dies if it sees an unrecognized command line option.,0.0
b805544,2011-10-29T23:48:13,Patch from Vijay for SLEPc 3.2 support,1.0
af2b5fd,2011-10-31T22:01:42,Added Abaqus reader.,0.0
ac3f24d,2011-11-01T19:29:57,Use -eps_type lapack for the example SLEPc program  for some reason arnoldi doesn't like our generalized eigen problem when it's complex-valued?,0.0
475db35,2011-11-01T19:57:18,Added <cstddef> to include/parallel/threads_allocators.h. Also  rbOOmit change: Replaced RBSCMSystem with RBSCMConstruction and RBSCMEvaluation classes.,0.0
ca81171,2011-11-02T16:47:18,"Removing unused ""using"" declarations",0.0
7a61973,2011-11-02T16:48:02,- Adding a function to allow for variations on CLI options - Accepting both --n_threads and --n-threads,0.0
9afe652,2011-11-02T16:58:58,Allow Utility::pow<>() to operate on non-Real values too.,0.0
81dc766,2011-11-02T18:57:48,test first time with writing access,0.0
eefaa3e,2011-11-02T19:36:59,Updated ignores.,0.0
84c4785,2011-11-02T19:37:14,Refactoring fe_lagrange.C functions to use specialization instead of instantiation.,0.0
439168f,2011-11-02T19:37:29,Refactoring fe_monomial.C functions to use specialization instead of instantiation.,0.0
68ebfb8,2011-11-02T19:37:44,Refactoring fe_xyz.C functions to use specialization instead of instantiation.,0.0
487af95,2011-11-02T19:37:58,Refactoring fe_hermite.C functions to use specialization instead of instantiation.,0.0
a8c3d57,2011-11-02T19:38:13,Refactoring fe_hierarchic.C functions to use specialization instead of instantiation.,0.0
023bcbb,2011-11-02T19:38:27,Refactoring fe_l2_hierarchic.C functions to use specialization instead of instantiation.,0.0
9b69759,2011-11-02T19:38:41,Refactoring fe_clough.C functions to use specialization instead of instantiation.,0.0
70c04de,2011-11-02T19:38:56,Refactoring fe_bernstein.C functions to use specialization instead of instantiation.,0.0
2c686b9,2011-11-02T19:39:10,Refactoring fe_scalar.C functions to use specialization instead of instantiation.,0.0
bd7c630,2011-11-02T19:39:24,Refactoring fe_szabab.C functions to use specialization instead of instantiation.,0.0
e71f282,2011-11-02T19:39:55,The INSTANTIATE_MBRF macro is no longer necessary  after the FE specialization refactoring.,0.0
7960b91,2011-11-03T15:19:36,Added Abaqus to UnstructuredMesh::read().,0.0
0c60d61,2011-11-03T15:31:21,rbOOmit change: allow training_parameters_random_seed to be read in from file in rb_scm_construction,0.0
6731a80,2011-11-03T17:02:55,Make ex6 write out .e files instead of .exd to be consistent with other examples.,0.0
cb36398,2011-11-03T17:03:10,Refactoring inf_fe_jacobi_20_00_eval.C functions to use specialization instead of instantiation.,0.0
c5ca15d,2011-11-03T17:03:24,Refactoring inf_fe_jacobi_30_00_eval.C functions to use specialization instead of instantiation.,0.0
057af77,2011-11-03T17:03:38,Refactoring inf_fe_lagrange_eval.C functions to use specialization instead of instantiation.,0.0
5dca71c,2011-11-03T17:03:53,Refactoring inf_fe_legendre_eval.C functions to use specialization instead of instantiation.,0.0
cc372d8,2011-11-03T17:04:19,Removed redundant const from protected InfFE::eval() and InfFE::eval_deriv() interfaces.,0.0
cb95f34,2011-11-03T17:26:55,Refactoring inf_fe_map_eval.C functions to use specialization instead of instantiation.,0.0
769007a,2011-11-03T19:50:21,rbOOmit change: updated ex23,0.0
8ae5a57,2011-11-03T20:10:40,rbOOmit: small changes to RBSCMConstruction,0.0
9dbf061,2011-11-07T16:38:54,Fixing memory leak when merging existing parameters,1.0
d381fe2,2011-11-07T17:17:33,Turn on keyword expansion in various new files.,0.0
e4909a4,2011-11-07T17:52:34,Fixing really old bug which always caused 4 distribution factors to be written out for sidesets.  This was crashing some versions of Paraview.,1.0
24ffa41,2011-11-07T18:17:16,Enabling keyword expansion in examples and fixing incorrect hard-coded date strings.,0.0
5b8494a,2011-11-07T18:21:22,Enable keyword expansion in m4 files and fix hard-coded one.,0.0
c82aea8,2011-11-07T18:29:24,SVN Keyword expansion cleanup,0.0
67c098c,2011-11-07T18:30:24,Turned on keyword expansion for .c files as well.,0.0
7d38ff5,2011-11-07T18:32:20,Fixed keyword expansion in example Makefiles.,1.0
f9d6c15,2011-11-08T16:53:43,Macros to make compare_types.h a little more terse,0.0
b3b5601,2011-11-08T17:49:18,Let the user specify that he wants to write Exodus files with mesh.mesh_dimension() rather than mesh.spatial_dimension().  This can be useful e.g. if you know that your 2D mesh lies in the z=0 plane.,0.0
15958c3,2011-11-09T00:41:32,Added Elem::is_linear(),0.0
e73cdbe,2011-11-09T00:42:54,That optimization is allowable for linear shape functions only  not for any affine element!,0.0
67b28c0,2011-11-09T02:51:14,created new directories  include/reduced_basis and src/reduced_basis  and moved all the rbOOmit code into there,0.0
ef0228c,2011-11-09T04:15:05,rbOOmit change: removed build_rb_evaluation from RBEIMConstruction,0.0
9f5a403,2011-11-09T18:18:41,The Laplace mesh smoother does not currently work with parallel meshes.,0.0
6855093.0,2011-11-09T18:22:48,Fix bug with L2_HIERARCHIC on non-simplices,1.0
1d23ee1,2011-11-09T18:31:32,Use ExodusII instead of GMV for DG example,0.0
7698aeb,2011-11-09T19:09:47,Fixed bugs in L2_HIERARCHIC.,1.0
c627ec2,2011-11-09T19:25:09,Reverting Truman's fix  it was redundant after mine,0.0
6e3914e,2011-11-09T20:16:18,Fix based on Boyce Griffith's patch for boundary calculations with shape-dependent quadrature rules or user-specified point sets,1.0
33ff1ec,2011-11-09T20:26:02,Tagged libMesh 0.7.2-rc1,0.0
48a67e4,2011-11-09T21:49:41,Updated CHANGES for 0.7.2,0.0
9a31fd3,2011-11-09T22:02:03,Use sub_point_locator()  not deprecated point_locator(),0.0
c7dd5e4,2011-11-09T22:03:36,Tiny optimization,0.0
30030fd,2011-11-10T15:20:56,Added support for PRISM6/15 and TET10 elements to Abaqus reader.,0.0
1b955a2,2011-11-10T20:02:20,Fix for discontinuous ExodusII output in parallel,1.0
b280f3c,2011-11-10T20:25:48,Fix missing header includes,1.0
07f0684,2011-11-10T20:30:26,"If a ""test_headers.sh"" includes any failures  return a failure code. ""make test_headers"" should now actually fail now when it fails",0.0
07809bb,2011-11-10T21:00:47,Patch from Lorenzo Botti: Avoid unnecessary inverse_map() to get node locations,1.0
749d109,2011-11-10T21:01:10,Tagging libMesh 0.7.2,0.0
109cc37,2011-11-10T21:14:30,Fix libmesh-0.7.2 organization  add libmesh_tests,1.0
