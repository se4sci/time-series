hash,time,message,buggy
2e9b865,9/29/10 8:00,The docstrings for the four analysis modules located in MDAnalysis/analysis/ have been modified to a reasonably consistent reStructuredText format to produce readable html pages (under doc/html/) built from the Sphinx source (at doc/sphinx/). The file doc/index.html has been removed as this was an old build for the MDAnalysis website. Docstring changes to distances.pyx were necessary as some objects were imported from this module by analysis/distances.py.,0
fd8866d,9/29/10 8:24,sphinx sources for docs,0
fe46507,9/29/10 8:25,generated html docs from reST sources via sphinx,0
d6e790c,9/30/10 21:11,added Tyler to AUTHORS,0
6ee42c3,10/2/10 23:51,additional testcases - added testcases for selections (but need more)   NOTE: testcase for Issue 43 (parenthesis without spaces) will currently throw and ERROR         until Issue 43 is fixed - added initial testcases for important methods of AtomGroup,0
319e53c,10/3/10 17:28,Summary: patch to resolve issue 43--whitespace is no longer required around the parentheses in selectAtoms strings. In module MDAnalysis/core/Selection.py and class SelectionParser  the method parse(self selectstr) now adds bounding whitespace around the input string so the parser can handle a lack of whitespace. Method __consume_token(self) in the same class has also been streamlined to incorporate the built-in pop() method rather than the more verbose alternative in place. The changes pass the unit test introduced in r456 and the enhancement has been added to the CHANGELOG.,0
e38e52a,10/4/10 2:26,backported log for 0.6.4.1 to CHANGELOG and added Tyler for fix of Issue 43,0
34cd627,10/4/10 2:26,nativecontacts example - added example script that makes the figure (works for me) - contacts.py: removed deprecated usage for Universe and added load() method   to simply read an existing contacts file - added and improved docs - added q1-q2 figure for DIMS AdK,0
f100480,10/11/10 2:01,reader() and writer() factory functions - coordinates.core.reader() returns the appropriate Reader instance for filename - coordinates.core.writer(filename  numatoms) gets a Writer instance  kwargs   are passed on to the actual Writer class - updated docs - removed get_writer_for from the general import statements in favour of   writer() - added docs - tests seem to pass,0
518ca5d,10/11/10 2:01,"writing of selections to trajectories - Writer class gained new high-level write() method which can take   either a Timestep  a Universe  or a AtomGroup. The atoms contained in   the argument are written as the next frame to the trajectory. - AtomGroup gained the ""ts"" property  which builds a Timestep on the fly   only containing the coordinates of the atoms in the group. frame and   unitcell are copied from the parent trajectory. - At the top level  import the coordinates.core.writer() factory function   as Writer to make it clearer for the user that it provides a Writer()   class instance. - updated Trajectory API (and all writer classes)",0
42e557f,10/11/10 2:01,AtomGroup can be translated and rotated - added translate() and rotate() methods to AtomGroup - this will go into 0.7 so I bumped version to 0.7.0-devel,0
4cd5c78,10/11/10 2:02,added transformations module - transformations.py and transformations.py are Copyright Christoph Gohlke    published under the Revised BSD Licence (GPC compatible) - obtained from http://www.lfd.uci.edu/~gohlke/ - This is a bit overkill but we might be able to use more of these functions   for homogeneous coordinates later for more model building  see   http://en.wikipedia.org/wiki/Homogeneous_coordinates and   http://en.wikipedia.org/wiki/Transformation_matrix for an introduction,0
c47b518,10/11/10 2:02,rotateby() method for AtomGroup and use of AtomGroups instead of arrays - uses transformations to compute the transformation matrix - allows use of AtomGroups to specify axis and point or absolute   cartesian coordinates - allow AtomGroup tuple for translate() - fixed (?) rotate() -- not sure if it properly updated _pos,0
529a2bf,10/11/10 2:02,added centroid() to AtomGroup and Atom - synonym for centerOfGeometry() and pos - allows using Atoms instead of AtomGroups in the translate() and rotateby()   methods,0
e4dd298,10/11/10 15:23,added transformations and improved trajectory writing to CHANGELOG,0
47670d7,10/11/10 15:23,added special selections for phi  psi  and omega dihedrals to Residue class,0
fa52c1b,10/11/10 15:23,AtomGroup gained residues and segments attributes - managed attributes (cached) that contain the full list of residue and   segment objects that make up the AtomGroup - use residues and segments to simplify or implement the resids()  resnames()    numberOf...() methods,0
d85833d,10/11/10 15:24,FIXED: test_write_selection: Test writing CA atoms to external file. (I had forgotten to add blanket kwargs to the GRO reader  which is required so that one can pass numatoms=None as required by the revised Trajectory API.),1
06ecf2e,10/11/10 15:24,new exception NoDataError,0
f945075,10/11/10 17:08,FIXED Issue 46: failed to write Segment  Residue  ResidueGroup - need to make sure to access the underlying list of atoms - also fixed an unreported issue in the CRDWriter  which wrote the wrong number of   atoms for a selection - simplified code in CRDWriter,1
d13722c,10/11/10 20:30,fixes for writing selections - fixed test for selection writin  which gave a false positive - fixed GROWriter,1
5c09783,10/11/10 21:03,added tests for Issue 46 and Issue 47 - Issue 46 passes (except for CRD because CRD Reader is missing  see Issue 40) - Issue 47 fails (because no solution is implemented yet),0
4e727ff,10/11/10 22:06,FIXED Issue 47 (attribute residue selection from segname now always returns a ResidueGroup) - changes old undocumented behaviour and MIGHT BREAK CODE - also documented the Segment.r<resid> selection but made it 1-based   (makes more sense from the user point of view as all structures/topologies start   numbering at 1 and not at 0 - updated CHANGELOG - tests pass (including the one for Issue 47),1
1e45292,10/12/10 0:59,minor changes to tests of fixed issues (added issue attribs and changed text),0
aa1f7e4,10/12/10 0:59,removed ALL deprecated and legacy code: OLD CODE MIGHT BREAK - AtomGroup._atoms removed - AtomGroup.principleAxes (Issue 33) - DCD.DCDReader.dcd_header() and DCD.DCDWriter.dcd_header()   (use _dcd_header()) - Universe.dcd (and Universe.xtc  Universe.trr...) --- from   now on only Universe.trajectory is supported.   WILL BREAK LEGACY CODE! - removed the following packages from top-level MDAnalysis   name space: - AtomGroup  Selection: import them from MDAnalysis.core if   really needed (e.g. 'import MDAnalysis.core.AtomGroup') - distances  rms_fitting: 'import MDAnalysis.analysis.distances'   or 'import MDAnalysis.analysis.align.rms_fitting' (the   actual modules still live in MDAnalysis.core but they   might get moved in the future and bundled with   transformations) - 'from MDAnalysis import *' will only get ['Timeseries'    'Universe'  'asUniverse'  'Writer'  'collection'] - removed copy flag from distance_array and self_distance_array:   setting it to False would always give wrong results so there was   no good reason keeping it around (also removed the test cases with   known failures),0
1d9fd02,10/12/10 1:10,fixes to distances test so that it runs with deprecated code removed,1
570d557,10/12/10 12:55,Merge branch 'cmatrix',0
3811c87,10/12/10 14:29,Test case for contact_matrix. Updated CHANGELOG,0
3750663,10/12/10 17:42,Fix of leaflet.py - AtomGroup must be imported from MDAnalysis.core,0
54c592f,10/12/10 20:20,CHANGELOG updating and polishing,0
7053bf8,10/12/10 20:20,Possibly FIXED Issue 27 (at least on Mac OS X 10.6) This bug is of little consequence to the user because the DCD _dcd_header() function was only implemented for debugging purposes and never documented  it should not be used in code.,0
11d0e8e,10/12/10 20:43,forgot to check in 2nd half of fix for Issue 27,1
3689a06,10/15/10 1:45,New SegmentGroup  residues and segments attributes return the corresponding group - improves the uniformity for access to the hierarchy - added new warning SelectionWarning - added docs and explained Universe > Segment >Residue > Atom hierarchy - added testcases for Atom and the hierarch attributes,0
d099b49,10/15/10 1:45,hierarchy made more consistent: AtomGroup.atoms is now a AtomGroup - AtomGroup.atoms is managed attribute - atom list (immutable  the old AG.atoms) is now AG._atoms - reSTified docs - use @property where possible in AtomGroup.py - adjusetd AG testcase,0
2c26403,10/15/10 12:49,updated CHANGELOG with hierarchy improvements,0
ae4f2a3,10/15/10 12:50,removed undocumented HBond setup (working on it on local branch),0
d3ceb6a,10/15/10 12:51,FIXED: Concantenated selections (for dih) were broken with the new AtomGroup.atoms attribute - make sure to get atoms from AtomGroup._atoms - added test case! - cleaned up AtomGroup docs - fixed some test cases that got broken  too,1
8c994aa,10/18/10 13:46,"Fix of ""point"" selections in atomSelect. Corrected docstring and converted coordinate arrays to dtype=float32",0
e80811b,10/19/10 20:33,LeafletFinder: use groups() instead of deprecated atoms() - atoms() method clashes conceptually with the atoms attribute of an AtomGroup - will be removed for 0.7.0 final (added deprecation warning) - separate group() function (like old atoms()) - and better docs,0
4.25E+98,10/19/10 20:34,simple example for using rotateby(): build the MthK tetramer (sort of...),0
2616917,10/19/10 20:34,Trajectory API: use close() to close the trajectory,0
fbc5149,10/19/10 21:22,leaflets: new example (center of planar membrane and approximate thickness) - new script  membrane-parameters.py - updated membrane-composition.py (atoms -> groups avoids deprecation warning)    better default selection - more docs,0
aed5881,10/20/10 0:03,AtomGroup: indexing reworked  implemented advanced slicing (Issue 36) - indexing of AtomGroup now always behaves like a list: integer --> Atom  slice --> AtomGroup  list/array --> AtomGroup (NEW  fixes Issue 36) - added test cases and modified older test cases (basically  atoms[:] cannot   be used to test for equality as it is now a AtomGroup  use ._atoms. - updated CHANGELOG (reorganized with a big AtomGroup section),0
6a8f62e,10/20/10 0:03,test cases: addressing Issue 45: deleting universes in test cases (in tearDown) to reduce memory footprint --- needs to be tested,0
fba0d98,10/20/10 10:39,completed FIX of Issue 45 - delete universes in tearDown() AND any references held in other data structures - reduced the maximum memory footprint to <512MB (roughly) of one test process - tests run faster again (with --processes=2 I get 109s on my MacBook Pro 2-core for ~170 tests,0
1307d9d,10/20/10 13:55,transformations: removed print() function (not needed and introduces backwards incomaptibilities),0
207223f,10/24/10 0:00,release candidate 1 for 0.7.0,0
b417d5d,10/24/10 0:01,minor omissions fixed - CHANGELOG: oops  AtomGroup._atoms is still here and really necessary - setup.py: added scipy as a requirement for analysis (needed for   sparse matrix in contact_matrix()),0
0a73248,10/25/10 12:27,added start_logging() and stop_logging() functions to top level - simple setup for a default logger - must be manually activated or a script must setup its own logger (see docs),0
48f2fb2,10/25/10 12:58,analysis.align: quick hacks to make it work again - must use an atom selection for the writer (workaround for Issue 49 when writing to a PDB or GRO) - added tol_mass parameter to avoid raising an exception for small mass differences (e.g. when   one structure is defined via a psf and the other via a pdb with atom mass heuristics) - fixed the progress counter (maybe use analysis.util.progress_meter instead?),0
52f1642,10/27/10 10:27,fixed: stop_logging(),1
9b963c6,10/27/10 10:27,FIXED Issue 50: can write DCDs again - only minor things needed to correct this - also removed deprecated dcdfilename attribute,1
4419adf,10/27/10 10:27,Trajectory API: added totaltime attribute to base.Reader - totaltime = dt * numframes - added test cases - made DCDReader error messages slightly more verbose,0
691d22f,10/28/10 9:12,CRD reader and test case,0
4edd6be,10/28/10 20:41,CRD Reader and Writer now in both standard and extended formats,0
7554fb4,10/30/10 13:03,rc3 with CRD reader (CRD PSF parser still missing and leads to unit test errors),0
b37a7b5,10/30/10 13:03,CHARMM CRD format: fixed a few inconsistencies in the Writer - TotRes is really 5 digits wide (not 4)  - x y z are 10 wide (not 9) - should have been not really a problem because we had simply padded the   fields so everything was in the right colum  technically  one could have had problems for totres > 9999   and coordinates >99999.999 - make sure to strip to larger values when writing extended format,0
8bfa301,10/30/10 13:03,tests: made coordinates test work consistently  also for crd - changed precisions to match the file format (e.g. 3 for pdb and 5   for crd)  otherwise the tests do not pass consistently) - new crd file that matches the small pdb so that we can use the same   tester class,0
4bb7156,10/30/10 13:03,added CRD parser for quick and dirty topology building from CHARMM card coordinate file,0
adc66ca,10/30/10 13:03,updated TODO: removed fixed stuff  added new ideas,0
7603305,10/30/10 23:05,coordinate tests: make sure that for Gromacs tests the conversion flag is set correctly - set core.flags[convert_gromacs_lengths] explicitly in setUp - encountered failures (possibly when running multiple tests with --processes=8) which   came about because the conversion flag was set to False even though it should have   been True,0
b869469,10/31/10 0:29,Trajectory API: clarified use of Writer write() method in response to Issue 49 - no code changes  only docs - Trajectory writers can take a Timestep as a rgument to write() - Frame writers only take a AtomGroup or a Universe for write(),0
2edbb91,10/31/10 0:29,test datafiles: fixed import list CRD_small -> CRD,0
6ff313f,10/31/10 0:29,Frame writer can take a Universe (fixes one half of Issue 49) - added universe attribute to Universe - altered GRO  CRD  and PrimitivePDB writer so that they can   deal with a Universe as argument (just get the coordinates from   the atoms instead of the 'selection' --- no performance penalty    just making use of the improved hierarchy and the fact that   .atoms is now a true AtomGroup) - added test case (passes),0
7129ae7,11/1/10 22:10,use PrimitivePDBReader as default PDB reader - Bio.PDB's reader can drop atoms when they have the same name   in a residue (which happens for systems generated from MD simulations)   The PrimitivePDBReader copes just fine with thos cases (but does   not handle esoteric PDB features such as alternative atoms and   insertion codes that are not needed for handling MD simulation data). - The default behaviour of MDAnalysis can be set through the flag       MDAnalysis.core.flag['permissive_pdb_reader']   The default is True. - One can always manually select the PDB reader by providing the   permissive keyword to Universe  e.g. Universe(... permissive=False)   will read the input file with the Bio.PDB reader. This might be   useful when processing true Protein Databank PDB files.,0
9dd0cc7,11/1/10 22:10,updated CHANGELOG with denniej's CRD additions (from http://code.google.com/p/mdanalysis/wiki/ReleaseNotes070 ),0
caaede7,11/2/10 12:36,Create branch release-0-7-0,0
5f4fef6,11/2/10 12:42,prepare 0.7.0 release: set release and date,0
861639e,11/3/10 12:49,fixed race conditions in test suite - any tests that relied on values of the internal flags have been   changed so that they set behaviour through keyword arguments instead    of manipulating flags - affects gromacs conversion of length (GRO  XTC  TRR) with the convert_gromacs_length   flag and the use of the permissive PDB reader (permissive_pdb_reader flag) - tests could fail when they were performed in parallel and different test threads   changed the global flags - added a fes tests to check for the default values but DO NOT USE THE FLAGS during   testing,1
aaabfa1,11/3/10 13:44,rc 4,0
9398f8d,11/3/10 13:51,fixed: tests for crd files would fail (added crds to setup.py distribution),1
a9b7195,11/3/10 18:44,upgraded ez_setup.py to 0.6c11,0
26f4e9d,11/3/10 22:22,Fix for issue 51: bolean correction from and to or for various flot32/64 checks etc.,1
1d0b90c,11/3/10 22:22,added Joe Goose to AUTHORS and documented fix of Issue 51 in CHANGELOG,0
a8454cb,11/6/10 1:55,release number 0.7.0 with changes to setup.py - removed numpy from requirements because we are needing it anyway    even for setup and thus check earlier  easy_install is sometimes   trying to download a version of numpy even though a required version   exists in the system. This can be hugely annoying is prevented   by removing it from requirements. - raise the error when importing numpy fails in order to make   debugging easier,0
0af3fb6,11/6/10 1:55,improvements to testing - added assert_ to test_atomgroup so that the tests can also be run with numpy <1.5 - added mini example script to examples for how to run all tests,0
aad2ad5,11/6/10 2:12,Create tag release-0-7-0,0